diff --git a/PKGBUILD b/PKGBUILD
index 14d0150..67aaa39 100644
--- a/PKGBUILD
+++ b/PKGBUILD
@@ -1,7 +1,10 @@
 # Maintainer : Daniel Bermond <dbermond@archlinux.org>
 
+# Set this variable to true or pass with makepkg to build with LLVM.
+: ${_llvm_build:=false}
+
 pkgname=x265-git
-pkgver=4.1.r189.gcd4f0d6e9
+pkgver=4.1.r191.g8f11c33ac
 pkgrel=1
 pkgdesc='Open source H.265/HEVC video encoder (git version)'
 arch=('x86_64')
@@ -13,9 +16,12 @@ depends=(
 makedepends=(
     'cmake'
     'git'
-    'nasm')
+    'nasm'
+    'ninja')
+${_llvm_build} && makedepends+=(clang lld llvm)
 provides=('x265' 'libx265.so')
 conflicts=('x265')
+options=('!lto') # don't include our lto flags
 source=('git+https://bitbucket.org/multicoreware/x265_git.git'
         '010-x265-gcc15-fix.patch')
 sha256sums=('SKIP'
@@ -30,9 +36,10 @@ pkgver() {
 }
 
 build() {
+    local extra_flags
     local -a common_opts_all=(
         '-Sx265_git/source'
-        '-GUnix Makefiles'
+        '-GNinja'
         '-DCMAKE_ASM_NASM_FLAGS:STRING=-w-macro-params-legacy'
         '-DCMAKE_INSTALL_PREFIX:PATH=/usr'
         '-DENABLE_HDR10_PLUS:BOOL=ON'
@@ -43,12 +50,44 @@ build() {
         '-DENABLE_SHARED:BOOL=OFF'
         '-DEXPORT_C_API:BOOL=OFF'
         '-DHIGH_BIT_DEPTH:BOOL=ON')
+    local -a cpu_simd_flags=(
+        # Disable MMX and 3DNow
+        '-mno-mmx' '-mno-3dnow' '-mno-3dnowa'
+        # Disable SSE3+ iterations only
+        '-mno-sse3' '-mno-ssse3' '-mno-sse4' '-mno-sse4a' '-mno-sse4.1' '-mno-sse4.2'
+        # Disable XOP/FMA4/CV16 extensions
+        '-mno-xop' '-mno-fma4' '-mno-f16c'
+        # Disable POPCNT/LZCNT extensions
+        '-mno-popcnt' '-mno-lzcnt'
+        # Disable AVX, and enable AVX2 and FMA3 extensions
+        '-mno-avx' '-mavx2' '-mfma'
+    )
+
+    if ${_llvm_build}; then
+        # Set path to our custom LLVM build set in dependencies
+        #export PATH=/opt/llvm19/bin:$PATH
+        #export LD_LIBRARY_PATH=/opt/llvm19/lib
+        export CXX=clang++
+
+        # Clang optimizes code with SSE2 instructions
+        cpu_simd_flags+=('-mno-sse' '-msse2')
+        # Build with full LTO using LLD linker
+        extra_flags=('-fuse-ld=lld' '-flto=full' '-Wno-unused-command-line-argument')
+    else
+        # GCC optimizes code with SSE instructions
+        cpu_simd_flags+=('-msse' '-mno-sse2' '-msse2avx')
+        # Enable automatic LTO linking and include fat objects
+        extra_flags=('-flto=auto' '-ffat-lto-objects')
+    fi
+
+    # Add LTO and CPU capabilities flags before proceeding
+    export CXXFLAGS+=" -mtune=native ${extra_flags[@]} ${cpu_simd_flags[@]}"
     
     cmake -B build-12 "${common_opts_10_12[@]}" -DMAIN12:BOOL='ON'
-    cmake --build build-12
+    ninja -C build-12
     
     cmake -B build-10 "${common_opts_10_12[@]}"
-    cmake --build build-10
+    ninja -C build-10
     
     cmake -B build \
         "${common_opts_all[@]}" \
@@ -59,9 +98,9 @@ build() {
         -DLINKED_12BIT:BOOL='ON'
     ln -s ../build-10/libx265.a build/libx265_main10.a
     ln -s ../build-12/libx265.a build/libx265_main12.a
-    cmake --build build
+    ninja -C build
 }
 
 package() {
-    DESTDIR="$pkgdir" cmake --install build
+    DESTDIR="$pkgdir" ninja -C build install
 }
